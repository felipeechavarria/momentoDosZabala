[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {
            "value": "\n```python\nimport flask\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PyMongo",
        "importPath": "flask_pymongo",
        "description": "flask_pymongo",
        "isExtraImport": true,
        "detail": "flask_pymongo",
        "documentation": {
            "value": "\n```python\nimport flask_pymongo\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {
            "value": "\n```python\nimport flask_cors\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {
            "value": "\n```python\nimport bson\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {
            "value": "\n```python\nimport sys.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "curdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pardir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pathsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "defpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "extsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "altsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "devnull",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copy_reg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy_reg",
        "description": "copy_reg",
        "detail": "copy_reg",
        "documentation": {
            "value": "\n```python\nimport copy_reg\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {
            "value": "\n```python\nimport site\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {
            "value": "\n```python\nimport contextlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {
            "value": "\n```python\nimport shutil\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {
            "value": "\n```python\nimport tempfile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {
            "value": "\n```python\nimport zipfile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "createDate",
        "kind": 2,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "def createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'birthdate':request.json['birthdate'],\n        'city':request.json['city'],\n        'neighborhood':request.json['neighborhood'],\n        'phone':request.json['phone']\n    })",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import createDate\n```\n\n```python\n\n\n```\n\n```python\ndef createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'birthdate':request.json['birthdate'],\n        'city':request.json['city'],\n        'neighborhood':request.json['neighborhood'],\n        'phone':request.json['phone']\n    })\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getDates",
        "kind": 2,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "def getDates():\n    dates = []\n    for doc in db.find():\n        dates.append({\n            '_id':str(ObjectId(doc['_id'])),\n            'name':doc['name'],\n            'lastname':doc['lastname'],\n            'identification':doc['identification'],\n            'birthdate':doc['birthdate'],\n            'city':doc['city'],",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import getDates\n```\n\n```python\n\n\n```\n\n```python\ndef getDates():\n    dates = []\n    for doc in db.find():\n        dates.append({\n            '_id':str(ObjectId(doc['_id'])),\n            'name':doc['name'],\n            'lastname':doc['lastname'],\n            'identification':doc['identification'],\n            'birthdate':doc['birthdate'],\n            'city':doc['city'],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getDate",
        "kind": 2,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "def getDate(id):\n    date = db.find_one({'_id': ObjectId(id)})\n    print(date)\n    return jsonify({\n        '_id': str(ObjectId(date['_id'])),\n        'name': date['name'],\n        'lastname': date['lastname'],\n        'identification': date['identification'],\n        'birthdate': date['birthdate'],\n        'city': date['city'],",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import getDate\n```\n\n```python\n\n\n```\n\n```python\ndef getDate(id):\n    date = db.find_one({'_id': ObjectId(id)})\n    print(date)\n    return jsonify({\n        '_id': str(ObjectId(date['_id'])),\n        'name': date['name'],\n        'lastname': date['lastname'],\n        'identification': date['identification'],\n        'birthdate': date['birthdate'],\n        'city': date['city'],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "deleteDate",
        "kind": 2,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "def deleteDate(id):\n    db.delete_one({'_id':ObjectId(id)})\n    return jsonify({'msg': 'Cita Eliminado'})\n@app.route('/PutDate/<id>', methods= ['PUT'])\ndef updateDate(id):\n    db.update_one({'_id':ObjectId(id)}, {'$set': {\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'identification':request.json['identification'],\n        'birthdate':request.json['birthdate'],",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import deleteDate\n```\n\n```python\n\n\n```\n\n```python\ndef deleteDate(id):\n    db.delete_one({'_id':ObjectId(id)})\n    return jsonify({'msg': 'Cita Eliminado'})\n@app.route('/PutDate/<id>', methods= ['PUT'])\ndef updateDate(id):\n    db.update_one({'_id':ObjectId(id)}, {'$set': {\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'identification':request.json['identification'],\n        'birthdate':request.json['birthdate'],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "updateDate",
        "kind": 2,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "def updateDate(id):\n    db.update_one({'_id':ObjectId(id)}, {'$set': {\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'identification':request.json['identification'],\n        'birthdate':request.json['birthdate'],\n        'city':request.json['city'],\n        'neighborhood':request.json['neighborhood'],\n        'phone':request.json['phone']\n    }})",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import updateDate\n```\n\n```python\n\n\n```\n\n```python\ndef updateDate(id):\n    db.update_one({'_id':ObjectId(id)}, {'$set': {\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'identification':request.json['identification'],\n        'birthdate':request.json['birthdate'],\n        'city':request.json['city'],\n        'neighborhood':request.json['neighborhood'],\n        'phone':request.json['phone']\n    }})\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "app = Flask (__name__)\napp.config['MONGO_URI']= 'mongodb://localhost/citasMedicasdb'\nmongo = PyMongo(app)\nCORS(app)\ndb = mongo.db.citasMedicasdb\n@app.route('/DatePost', methods= ['POST'])\ndef createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import app\n```\n\n```python\n\n\n```\n\n```python\napp = Flask (__name__)\napp.config['MONGO_URI']= 'mongodb://localhost/citasMedicasdb'\nmongo = PyMongo(app)\nCORS(app)\ndb = mongo.db.citasMedicasdb\n@app.route('/DatePost', methods= ['POST'])\ndef createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mongo",
        "kind": 5,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "mongo = PyMongo(app)\nCORS(app)\ndb = mongo.db.citasMedicasdb\n@app.route('/DatePost', methods= ['POST'])\ndef createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'birthdate':request.json['birthdate'],",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import mongo\n```\n\n```python\n\n\n```\n\n```python\nmongo = PyMongo(app)\nCORS(app)\ndb = mongo.db.citasMedicasdb\n@app.route('/DatePost', methods= ['POST'])\ndef createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'birthdate':request.json['birthdate'],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "ApiRestPython.src.app",
        "description": "ApiRestPython.src.app",
        "peekOfCode": "db = mongo.db.citasMedicasdb\n@app.route('/DatePost', methods= ['POST'])\ndef createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'birthdate':request.json['birthdate'],\n        'city':request.json['city'],\n        'neighborhood':request.json['neighborhood'],",
        "detail": "ApiRestPython.src.app",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.src.app import db\n```\n\n```python\n\n\n```\n\n```python\ndb = mongo.db.citasMedicasdb\n@app.route('/DatePost', methods= ['POST'])\ndef createDate():\n    id = db.insert({\n        'identification':request.json['identification'],\n        'name':request.json['name'],\n        'lastname':request.json['lastname'],\n        'birthdate':request.json['birthdate'],\n        'city':request.json['city'],\n        'neighborhood':request.json['neighborhood'],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "makedirs",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import makedirs\n```\n\n```python\n\n\n```\n\n```python\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "removedirs",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def removedirs(name):\n    \"\"\"removedirs(path)\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n    \"\"\"\n    rmdir(name)",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import removedirs\n```\n\n```python\n\n\n```\n\n```python\ndef removedirs(name):\n    \"\"\"removedirs(path)\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n    \"\"\"\n    rmdir(name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "renames",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def renames(old, new):\n    \"\"\"renames(old, new)\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import renames\n```\n\n```python\n\n\n```\n\n```python\ndef renames(old, new):\n    \"\"\"renames(old, new)\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n        dirpath, dirnames, filenames\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import walk\n```\n\n```python\n\n\n```\n\n```python\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n        dirpath, dirnames, filenames\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execl",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def execl(file, *args):\n    \"\"\"execl(file, *args)\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import execl\n```\n\n```python\n\n\n```\n\n```python\ndef execl(file, *args):\n    \"\"\"execl(file, *args)\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execle",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import execle\n```\n\n```python\n\n\n```\n\n```python\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execlp",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import execlp\n```\n\n```python\n\n\n```\n\n```python\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execlpe",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import execlpe\n```\n\n```python\n\n\n```\n\n```python\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execvp",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import execvp\n```\n\n```python\n\n\n```\n\n```python\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "execvpe",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\ndef _execvpe(file, args, env=None):\n    if env is not None:",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import execvpe\n```\n\n```python\n\n\n```\n\n```python\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\ndef _execvpe(file, args, env=None):\n    if env is not None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "getenv",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "def getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\"\"\"\n    return environ.get(key, default)\n__all__.append(\"getenv\")\ndef _exists(name):\n    return name in globals()\n# Supply spawn*() (probably only for Unix)\nif _exists(\"fork\") and not _exists(\"spawnv\") and _exists(\"execv\"):\n    P_WAIT = 0",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import getenv\n```\n\n```python\n\n\n```\n\n```python\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\"\"\"\n    return environ.get(key, default)\n__all__.append(\"getenv\")\ndef _exists(name):\n    return name in globals()\n# Supply spawn*() (probably only for Unix)\nif _exists(\"fork\") and not _exists(\"spawnv\") and _exists(\"execv\"):\n    P_WAIT = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_names",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "_names = sys.builtin_module_names\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"extsep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\",\n           \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import _names\n```\n\n```python\n\n\n```\n\n```python\n_names = sys.builtin_module_names\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"extsep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\",\n           \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"extsep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\",\n           \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\nif 'posix' in _names:\n    name = 'posix'",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"extsep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\",\n           \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\nif 'posix' in _names:\n    name = 'posix'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.modules['os.path']",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "sys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\ndel _names\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n#'",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import sys.modules['os.path']\n```\n\n```python\n\n\n```\n\n```python\nsys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\ndel _names\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n#'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_SET",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "SEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import SEEK_SET\n```\n\n```python\n\n\n```\n\n```python\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_CUR",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "SEEK_CUR = 1\nSEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import SEEK_CUR\n```\n\n```python\n\n\n```\n\n```python\nSEEK_CUR = 1\nSEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SEEK_END",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Lib.os",
        "description": "ApiRestPython.venv.Lib.os",
        "peekOfCode": "SEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.",
        "detail": "ApiRestPython.venv.Lib.os",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.os import SEEK_END\n```\n\n```python\n\n\n```\n\n```python\nSEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def main():\n    \"\"\"Patch what needed, and invoke the original site.py\"\"\"\n    config = read_pyvenv()\n    sys.real_prefix = sys.base_prefix = config[\"base-prefix\"]\n    sys.base_exec_prefix = config[\"base-exec-prefix\"]\n    sys.base_executable = config[\"base-executable\"]\n    global_site_package_enabled = config.get(\"include-system-site-packages\", False) == \"true\"\n    rewrite_standard_library_sys_path()\n    disable_user_site_package()\n    load_host_site()",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n    \"\"\"Patch what needed, and invoke the original site.py\"\"\"\n    config = read_pyvenv()\n    sys.real_prefix = sys.base_prefix = config[\"base-prefix\"]\n    sys.base_exec_prefix = config[\"base-exec-prefix\"]\n    sys.base_executable = config[\"base-executable\"]\n    global_site_package_enabled = config.get(\"include-system-site-packages\", False) == \"true\"\n    rewrite_standard_library_sys_path()\n    disable_user_site_package()\n    load_host_site()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "load_host_site",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def load_host_site():\n    \"\"\"trigger reload of site.py - now it will use the standard library instance that will take care of init\"\"\"\n    # we have a duality here, we generate the platform and pure library path based on what distutils.install specifies\n    # because this is what pip will be using; the host site.py though may contain it's own pattern for where the\n    # platform and pure library paths should exist\n    # notably on Ubuntu there's a patch for getsitepackages to point to\n    # - prefix + local/lib/pythonx.y/dist-packages\n    # - prefix + lib/pythonx.y/dist-packages\n    # while distutils.install.cmd still points both of these to\n    # - prefix + lib/python2.7/site-packages",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import load_host_site\n```\n\n```python\n\n\n```\n\n```python\ndef load_host_site():\n    \"\"\"trigger reload of site.py - now it will use the standard library instance that will take care of init\"\"\"\n    # we have a duality here, we generate the platform and pure library path based on what distutils.install specifies\n    # because this is what pip will be using; the host site.py though may contain it's own pattern for where the\n    # platform and pure library paths should exist\n    # notably on Ubuntu there's a patch for getsitepackages to point to\n    # - prefix + local/lib/pythonx.y/dist-packages\n    # - prefix + lib/pythonx.y/dist-packages\n    # while distutils.install.cmd still points both of these to\n    # - prefix + lib/python2.7/site-packages\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "read_pyvenv",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def read_pyvenv():\n    \"\"\"read pyvenv.cfg\"\"\"\n    config_file = \"{}{}pyvenv.cfg\".format(sys.prefix, sep)\n    with open(config_file) as file_handler:\n        lines = file_handler.readlines()\n    config = {}\n    for line in lines:\n        try:\n            split_at = line.index(\"=\")\n        except ValueError:",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import read_pyvenv\n```\n\n```python\n\n\n```\n\n```python\ndef read_pyvenv():\n    \"\"\"read pyvenv.cfg\"\"\"\n    config_file = \"{}{}pyvenv.cfg\".format(sys.prefix, sep)\n    with open(config_file) as file_handler:\n        lines = file_handler.readlines()\n    config = {}\n    for line in lines:\n        try:\n            split_at = line.index(\"=\")\n        except ValueError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "rewrite_standard_library_sys_path",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def rewrite_standard_library_sys_path():\n    \"\"\"Once this site file is loaded the standard library paths have already been set, fix them up\"\"\"\n    exe, prefix, exec_prefix = get_exe_prefixes(base=False)\n    base_exe, base_prefix, base_exec = get_exe_prefixes(base=True)\n    exe_dir = exe[: exe.rfind(sep)]\n    for at, path in enumerate(sys.path):\n        path = abs_path(path)  # replace old sys prefix path starts with new\n        skip_rewrite = path == exe_dir  # don't fix the current executable location, notably on Windows this gets added\n        skip_rewrite = skip_rewrite  \n        if not skip_rewrite:",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import rewrite_standard_library_sys_path\n```\n\n```python\n\n\n```\n\n```python\ndef rewrite_standard_library_sys_path():\n    \"\"\"Once this site file is loaded the standard library paths have already been set, fix them up\"\"\"\n    exe, prefix, exec_prefix = get_exe_prefixes(base=False)\n    base_exe, base_prefix, base_exec = get_exe_prefixes(base=True)\n    exe_dir = exe[: exe.rfind(sep)]\n    for at, path in enumerate(sys.path):\n        path = abs_path(path)  # replace old sys prefix path starts with new\n        skip_rewrite = path == exe_dir  # don't fix the current executable location, notably on Windows this gets added\n        skip_rewrite = skip_rewrite  \n        if not skip_rewrite:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_exe_prefixes",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def get_exe_prefixes(base=False):\n    return tuple(abs_path(getattr(sys, (\"base_\" if base else \"\") + i)) for i in (\"executable\", \"prefix\", \"exec_prefix\"))\ndef abs_path(value):\n    values, keep = value.split(sep), []\n    at = len(values) - 1\n    while at >= 0:\n        if values[at] == \"..\":\n            at -= 1\n        else:\n            keep.append(values[at])",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import get_exe_prefixes\n```\n\n```python\n\n\n```\n\n```python\ndef get_exe_prefixes(base=False):\n    return tuple(abs_path(getattr(sys, (\"base_\" if base else \"\") + i)) for i in (\"executable\", \"prefix\", \"exec_prefix\"))\ndef abs_path(value):\n    values, keep = value.split(sep), []\n    at = len(values) - 1\n    while at >= 0:\n        if values[at] == \"..\":\n            at -= 1\n        else:\n            keep.append(values[at])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "abs_path",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def abs_path(value):\n    values, keep = value.split(sep), []\n    at = len(values) - 1\n    while at >= 0:\n        if values[at] == \"..\":\n            at -= 1\n        else:\n            keep.append(values[at])\n        at -= 1\n    return sep.join(keep[::-1])",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import abs_path\n```\n\n```python\n\n\n```\n\n```python\ndef abs_path(value):\n    values, keep = value.split(sep), []\n    at = len(values) - 1\n    while at >= 0:\n        if values[at] == \"..\":\n            at -= 1\n        else:\n            keep.append(values[at])\n        at -= 1\n    return sep.join(keep[::-1])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "map_path",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def map_path(path, base_executable, exe_dir, exec_prefix, base_prefix, prefix, base_exec_prefix):\n    if path_starts_with(path, exe_dir):\n        # content inside the exe folder needs to remap to original executables folder\n        orig_exe_folder = base_executable[: base_executable.rfind(sep)]\n        return \"{}{}\".format(orig_exe_folder, path[len(exe_dir) :])\n    elif path_starts_with(path, prefix):\n        return \"{}{}\".format(base_prefix, path[len(prefix) :])\n    elif path_starts_with(path, exec_prefix):\n        return \"{}{}\".format(base_exec_prefix, path[len(exec_prefix) :])\n    return path",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import map_path\n```\n\n```python\n\n\n```\n\n```python\ndef map_path(path, base_executable, exe_dir, exec_prefix, base_prefix, prefix, base_exec_prefix):\n    if path_starts_with(path, exe_dir):\n        # content inside the exe folder needs to remap to original executables folder\n        orig_exe_folder = base_executable[: base_executable.rfind(sep)]\n        return \"{}{}\".format(orig_exe_folder, path[len(exe_dir) :])\n    elif path_starts_with(path, prefix):\n        return \"{}{}\".format(base_prefix, path[len(prefix) :])\n    elif path_starts_with(path, exec_prefix):\n        return \"{}{}\".format(base_exec_prefix, path[len(exec_prefix) :])\n    return path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "path_starts_with",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def path_starts_with(directory, value):\n    return directory.startswith(value if value[-1] == sep else value + sep)\ndef disable_user_site_package():\n    \"\"\"Flip the switch on enable user site package\"\"\"\n    # sys.flags is a c-extension type, so we cannot monkeypatch it, replace it with a python class to flip it\n    sys.original_flags = sys.flags\n    class Flags(object):\n        def __init__(self):\n            self.__dict__ = {key: getattr(sys.flags, key) for key in dir(sys.flags) if not key.startswith(\"_\")}\n    sys.flags = Flags()",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import path_starts_with\n```\n\n```python\n\n\n```\n\n```python\ndef path_starts_with(directory, value):\n    return directory.startswith(value if value[-1] == sep else value + sep)\ndef disable_user_site_package():\n    \"\"\"Flip the switch on enable user site package\"\"\"\n    # sys.flags is a c-extension type, so we cannot monkeypatch it, replace it with a python class to flip it\n    sys.original_flags = sys.flags\n    class Flags(object):\n        def __init__(self):\n            self.__dict__ = {key: getattr(sys.flags, key) for key in dir(sys.flags) if not key.startswith(\"_\")}\n    sys.flags = Flags()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "disable_user_site_package",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def disable_user_site_package():\n    \"\"\"Flip the switch on enable user site package\"\"\"\n    # sys.flags is a c-extension type, so we cannot monkeypatch it, replace it with a python class to flip it\n    sys.original_flags = sys.flags\n    class Flags(object):\n        def __init__(self):\n            self.__dict__ = {key: getattr(sys.flags, key) for key in dir(sys.flags) if not key.startswith(\"_\")}\n    sys.flags = Flags()\n    sys.flags.no_user_site = 1\ndef add_global_site_package():",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import disable_user_site_package\n```\n\n```python\n\n\n```\n\n```python\ndef disable_user_site_package():\n    \"\"\"Flip the switch on enable user site package\"\"\"\n    # sys.flags is a c-extension type, so we cannot monkeypatch it, replace it with a python class to flip it\n    sys.original_flags = sys.flags\n    class Flags(object):\n        def __init__(self):\n            self.__dict__ = {key: getattr(sys.flags, key) for key in dir(sys.flags) if not key.startswith(\"_\")}\n    sys.flags = Flags()\n    sys.flags.no_user_site = 1\ndef add_global_site_package():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "add_global_site_package",
        "kind": 2,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "def add_global_site_package():\n    \"\"\"add the global site package\"\"\"\n    import site\n    # add user site package\n    sys.flags = sys.original_flags  # restore original\n    site.ENABLE_USER_SITE = None  # reset user site check\n    # add the global site package to the path - use new prefix and delegate to site.py\n    orig_prefixes = None\n    try:\n        orig_prefixes = site.PREFIXES",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import add_global_site_package\n```\n\n```python\n\n\n```\n\n```python\ndef add_global_site_package():\n    \"\"\"add the global site package\"\"\"\n    import site\n    # add user site package\n    sys.flags = sys.original_flags  # restore original\n    site.ENABLE_USER_SITE = None  # reset user site check\n    # add the global site package to the path - use new prefix and delegate to site.py\n    orig_prefixes = None\n    try:\n        orig_prefixes = site.PREFIXES\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Lib.site",
        "description": "ApiRestPython.venv.Lib.site",
        "peekOfCode": "sep = \"\\\\\" if sys.platform == \"win32\" else \"/\"  # no os module here yet - poor mans version\ndef read_pyvenv():\n    \"\"\"read pyvenv.cfg\"\"\"\n    config_file = \"{}{}pyvenv.cfg\".format(sys.prefix, sep)\n    with open(config_file) as file_handler:\n        lines = file_handler.readlines()\n    config = {}\n    for line in lines:\n        try:\n            split_at = line.index(\"=\")",
        "detail": "ApiRestPython.venv.Lib.site",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Lib.site import sep\n```\n\n```python\n\n\n```\n\n```python\nsep = \"\\\\\" if sys.platform == \"win32\" else \"/\"  # no os module here yet - poor mans version\ndef read_pyvenv():\n    \"\"\"read pyvenv.cfg\"\"\"\n    config_file = \"{}{}pyvenv.cfg\".format(sys.prefix, sep)\n    with open(config_file) as file_handler:\n        lines = file_handler.readlines()\n    config = {}\n    for line in lines:\n        try:\n            split_at = line.index(\"=\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import bin_dir\n```\n\n```python\n\n\n```\n\n```python\nbin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import base\n```\n\n```python\n\n\n```\n\n```python\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import os.environ[\"PATH\"]\n```\n\n```python\n\n\n```\n\n```python\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import os.environ[\"VIRTUAL_ENV\"]\n```\n\n```python\n\n\n```\n\n```python\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import prev_length\n```\n\n```python\n\n\n```\n\n```python\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"yes\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import sys.path[:]\n```\n\n```python\n\n\n```\n\n```python\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import sys.real_prefix\n```\n\n```python\n\n\n```\n\n```python\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "ApiRestPython.venv.Scripts.activate_this",
        "description": "ApiRestPython.venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "ApiRestPython.venv.Scripts.activate_this",
        "documentation": {
            "value": "\n```python\nfrom ApiRestPython.venv.Scripts.activate_this import sys.prefix\n```\n\n```python\n\n\n```\n\n```python\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cleanup",
        "kind": 2,
        "importPath": "citasMedecas.node_modules.react-native.ReactAndroid.src.main.third-party.android.support.v7.appcompat.aar-unpacker",
        "description": "citasMedecas.node_modules.react-native.ReactAndroid.src.main.third-party.android.support.v7.appcompat.aar-unpacker",
        "peekOfCode": "def cleanup(path):\n    yield path\n    shutil.rmtree(path)\nif __name__ == '__main__':\n    with zipfile.ZipFile(sys.argv[1], 'r') as z:\n        with cleanup(tempfile.mkdtemp()) as temp_path:\n            z.extractall(temp_path, filter(lambda n: n.startswith(sys.argv[2]), z.namelist()))\n            shutil.move(os.path.join(temp_path, sys.argv[2]), sys.argv[3])",
        "detail": "citasMedecas.node_modules.react-native.ReactAndroid.src.main.third-party.android.support.v7.appcompat.aar-unpacker",
        "documentation": {
            "value": "\n```python\nfrom citasMedecas.node_modules.react-native.ReactAndroid.src.main.third-party.android.support.v7.appcompat.aar-unpacker import cleanup\n```\n\n```python\n\n\n```\n\n```python\ndef cleanup(path):\n    yield path\n    shutil.rmtree(path)\nif __name__ == '__main__':\n    with zipfile.ZipFile(sys.argv[1], 'r') as z:\n        with cleanup(tempfile.mkdtemp()) as temp_path:\n            z.extractall(temp_path, filter(lambda n: n.startswith(sys.argv[2]), z.namelist()))\n            shutil.move(os.path.join(temp_path, sys.argv[2]), sys.argv[3])\n```\n",
            "supportThemeIcons": false
        }
    }
]